<?php
class ViporderAction extends CommonAction{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->assign('logistics', $logistics = D('Logistics')->where(array('closed'=>0,'shop_id'=>-1))->select());
    }

    //显示
    public function index(){
        $this->status = array('IN',array(0,1,2,3,4,5,6,7,8));
        $this->is_daofu = array('IN',array(0,1));
        $this->shows();
        $this->display();
    }

    //待发货
    public function wait(){
        $this->status = 1;
        $this->is_daofu = array('IN',array(0,1));
        $this->shows();
        $this->display();
    }

    //已发货
    public function deliver(){
        $this->status =2;
        $this->is_daofu = array('IN',array(0,1));
        $this->shows();
        $this->display();
    }

    //已完成
    public function complete(){
        $this->status = 8;
        $this->is_daofu = array('IN',array(0,1));
        $this->shows();
        $this->display();
    }

    //显示
    public function shows(){
        $Order = D('ExchangeOrder');
        import('ORG.Util.Page');
        $map = array('closed' => 0, 'status' => $this->status , 'is_daofu' => $this->is_daofu);
        $keyword = $this->_param('keyword', 'htmlspecialchars');
        if ($keyword) {
            $map['order_id'] = array('LIKE', '%' . $keyword . '%');
            $this->assign('keyword', $keyword);
        }
        if (isset($_GET['st']) || isset($_POST['st'])) {
            $st = (int) $this->_param('st');
            if ($st != 999) {
                $map['status'] = $st;
            }
            $this->assign('st', $st);
        } else {
            $this->assign('st', 999);
        }
        if (($bg_date = $this->_param('bg_date', 'htmlspecialchars')) && ($end_date = $this->_param('end_date', 'htmlspecialchars'))) {
            $bg_time = strtotime($bg_date);
            $end_time = strtotime($end_date);
            $map['create_time'] = array(array('ELT', $end_time), array('EGT', $bg_time));
            $this->assign('bg_date', $bg_date);
            $this->assign('end_date', $end_date);
        } else {
            if ($bg_date = $this->_param('bg_date', 'htmlspecialchars')) {
                $bg_time = strtotime($bg_date);
                $this->assign('bg_date', $bg_date);
                $map['create_time'] = array('EGT', $bg_time);
            }
            if ($end_date = $this->_param('end_date', 'htmlspecialchars')) {
                $end_time = strtotime($end_date);
                $this->assign('end_date', $end_date);
                $map['create_time'] = array('ELT', $end_time);
            }
        }
        if ($user_id = (int) $this->_param('user_id')) {
            $users = D('Users')->find($user_id);
            $this->assign('nickname', $users['nickname']);
            $this->assign('user_id', $user_id);
            $map['user_id'] = $user_id;
        }
        if ($shop_id = (int) $this->_param('shop_id')) {
            $map['shop_id'] = $shop_id;
            $shop = D('Shop')->find($shop_id);
            $this->assign('shop_name', $shop['shop_name']);
            $this->assign('shop_id', $shop_id);
        }
        $count = $Order->where($map)->count();
        $Page = new Page($count, 10);
        $show = $Page->show();
        $list = $Order->where($map)->order(array('order_id' => 'desc'))->limit($Page->firstRow . ',' . $Page->listRows)->select();
        $user_ids = $order_ids = $addr_ids = array();
        foreach ($list as $key => $val) {
            $user_ids[$val['user_id']] = $val['user_id'];
            $order_ids[$val['order_id']] = $val['order_id'];
            $addr_ids[$val['addr_id']] = $val['addr_id'];
            $address_ids[$val['address_id']] = $val['address_id'];
        }

        if (!empty($order_ids)) {
            $goods = D('ExchangeOrderGoods')->where(array('order_id' => array('IN', $order_ids)))->select();
            $goods_ids = array();
            foreach ($goods as $val) {
                $goods_ids[] = $val['goods_id'];
            }
            $this->assign('goods', $goods);
            $this->assign('products', D('ExchangeGoods')->itemsByIds($goods_ids));

        }
        $this->assign('addrs', D('Paddress')->itemsByIds($address_ids));
        $this->assign('areas', D('Area')->fetchAll());
        $this->assign('business', D('Business')->fetchAll());
        $this->assign('users', D('Users')->itemsByIds($user_ids));
        $this->assign('types', D('ExchangeOrder')->getType());
        $this->assign('goodtypes', D('ExchangeOrderGoods')->getType());
        $this->assign('list', $list);
        $this->assign('page', $show);
    }

    //发货
    public function express($order_id = 0){
        $data = $_POST;
        $order_id = $data['order_id'];
        if (!($detail = D('ExchangeOrder')->find($order_id))) {
            $this->ajaxReturn(array('status' => 'error', 'msg' => '没有该订单'.$order_id));
        }
        if ($detail['closed'] != 0) {
            $this->ajaxReturn(array('status' => 'error', 'msg' => '该订单已经被删除'));
        }
        if ($detail['status'] == 2 || $detail['status'] == 3 || $detail['status'] == 8 || $detail['status'] == 4 || $detail['status'] == 5) {
            $this->ajaxReturn(array('status' => 'error', 'msg' => '该订单状态不正确，不能发货'));
        }
        $express_id = $data['express_id'];
        if (empty($express_id)) {
            $this->ajaxReturn(array('status' => 'error', 'msg' => '请选择快递'));
        }
        if (!($detail = D('Logistics')->find($express_id))) {
            $this->ajaxReturn(array('status' => 'error', 'msg' => '没有'.$detail['express_name'].'快递'));
        }
        if ($detail['closed'] != 0) {
            $this->ajaxReturn(array('status' => 'error', 'msg' => '该快递已关闭'));
        }
        $express_number = $data['express_number'];
        if (empty($express_number)) {
            $this->ajaxReturn(array('status' => 'error', 'msg' => '快递单号不能为空'));
        }
        $add_express = array(
            'order_id' => $order_id,
            'update_time'=>NOW_TIME,
            'update_ip'=>get_client_ip(),
            'express_id' => $express_id,
            'express_number' => $express_number
        );
        if(D('ExchangeOrder')->save($add_express)){
            D('ExchangeOrder')->pc_express_deliver($order_id);//执行发货
            D('Weixinmsg')->weixinTmplOrderMessage($order_id,$cate = 1,$type = 2,$status = 2);
            D('Weixinmsg')->weixinTmplOrderMessage($order_id,$cate = 2,$type = 2,$status = 2);
            $this->ajaxReturn(array('status' => 'success', 'msg' => '一键发货成功', 'url' => U('viporder/wait')));
        }else{
            $this->ajaxReturn(array('status' => 'error', 'msg' => '发货失败'));
        }
    }

    //确认完成
    public function distribution() {
        $order_id = (int) $this->_get('order_id');
        $config = D('Setting')->fetchAll();
        $days = isset($config['site']['goods']) ? (int)$config['site']['goods'] : 15;
        $t = NOW_TIME - $days*86400;
        if (!$order_id) {
            $this->tuError('参数错误');
        }else if(!$order = D('ExchangeOrder')->find($order_id)){
            $this->tuError('该订单不存在');
        }else if(($order['status'] != 2) && ($order['status']!=3)){
            $this->tuError('该订单状态不正确，不能确定完成');
        }else{
            D('ExchangeOrder')->overOrder($order_id); //发货订单接口
            $this->tuSuccess('确认订单完成，资金已结算', U('viporder/delivery'));
        }
        $this->tuError('确认订单失败');
    }

















}