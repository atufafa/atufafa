<?php
class MallactivityAction extends CommonAction
{
    private $create_fiel=array('type_id','shop_id','time_id','goods_id','create_time','create_ip','num','end_time','price','xiatime','type','num2');
    private $create_fields = array('shop_id','time_num','mai_num','title','type_id','guige','time_id','photo','parent_id','explain', 'shoplx','cate_id', 'intro', 'num','is_reight','weight','kuaidi_id','price', 'shopcate_id', 'mall_price','details', 'end_date','is_vs1','is_vs2','is_vs3','is_vs4','is_vs5','is_vs6','is_vs7','is_vs8','is_vs9','readi');


    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $config=D('Setting')->fetchAll();
        $is_ipen=$config['goods']['is_open'];
        if($is_ipen==0){
            $this->tuError('此活动暂未开放');
        }
        $this->assign('config',$config);
        $Shopping=D('MallactivityGoods')->where(['shop_id'=>$this->shop_id,'type_id'=>1,'audit'=>1,'colsed'=>0])->select();
        $this->assign('shopping',$Shopping);
        $this->assign('kuaidi', D('Pkuaidi')->where(array('shop_id'=>$this->shop_id,'type'=>goods,'closed'=>0))->select());

        $this->autocates = D('Goodsshopcate')->where(array('shop_id' => $this->shop_id))->select();
        $this->assign('autocates', $this->autocates);

        $this->assign('type',D('Mallactivity')->select());
        $this->assign('time',D('MallactivitySpecial')->select());
    }

    //显示列表
    public function index(){
        $obj=D('MallactivityGoods');
        import('ORG.Util.Page');
        $map = array('shop_id'=>$this->shop_id);
        $count = $obj->where($map)->count();
        $Page = new Page($count, 15);
        $show = $Page->show();
        $list = $obj->where($map)->order(array('create_time' => 'desc'))->limit($Page->firstRow . ',' . $Page->listRows)->select();
        $type_id =$product_id=$time_ids= array();
        foreach ($list as $key => $val) {
            $type_id[$val['type_id']] = $val['type_id'];
            $time_ids[$val['time_id']]=$val['time_id'];
        }
        $type= D('Mallactivity')->itemsByIds($type_id);
        $this->assign('type',$type);
        $time=D('MallactivitySpecial')->itemsByIds($time_ids);
        $this->assign('time',$time);
        $this->assign('list', $list);
        $this->assign('page', $show);
        $this->display();
    }

    //发布商品
//    public function create(){
//        if ($this->isPost()) {
//            $data = $this->createCheck();
//            $obj = D('MallactivityGoods');
//            $cunz=$obj->where(['goods_id'=>$data['goods_id'],'id'=>$data['id'],'closed'=>0,'audit'=>1])->find();
//            if(!empty($cunz)){
//                $this->tuError('该商品已存在该活动');
//            }
//            if ($obj->add($data)) {
//               D('Goods')->where(['shop_id'=>$this->shop_id,'goods_id'=>$data['goods_id']])
//                   ->save(['mall_price'=>$data['price'],'num'=>$data['num'],'huodong'=>0,'type_id'=>$data['type_id'],'num1'=>$data['num']]);
//                $this->tuSuccess('添加成功', U('mallactivity/index'));
//            }
//            $this->tuError('操作失败');
//        } else {
//            $this->assign('time',D('MallactivitySpecial')->select());
//            $this->assign('type',D('Mallactivity')->select());
//            $this->assign('goods',D('Goods')->where(['shop_id'=>$this->shop_id])->select());
//            $this->display();
//        }
//    }

//    private function createCheck()
//    {
//        $data = $this->checkFields($this->_post('data', false), $this->create_fields);
//        $data['goods_id'] = (int)$data['goods_id'];
//        if (empty($data['goods_id'])) {
//            $this->tuError('活动商品不能为空');
//        }
//        $data['type_id'] = (int)$data['type_id'];
//        if (empty($data['type_id'])) {
//            $this->tuError('类型ID不能为空');
//        }
//        $data['shop_id'] = $this->shop_id;
//        $data['price'] = (float)$data['price'];
//        if (empty($data['price'])) {
//            $this->tuError('价格不能为空');
//        }
//
//        //天天特价
//        $data['type_id'] = htmlspecialchars($data['type_id']);
//        $data['time_id']= (int) $data['time_id'];
//        if($data['type_id']==1 && $data['time_id']==0){
//            $this->tuError('请选择开售时间');
//        }
//
//        if($data['type_id'] ==2){
//            if (!ereg("^[0-9]{1,3}[.][8]$", $data['price'])) {
//                $this->tuError('小数点后一位必须为8');
//            }
//        }
//        //限量团购
//        $data['num'] = (int) $data['num'];
//        if(empty($data['num'])){
//            $this->tuError('请选择售卖份数');
//        }
//        $data['num2'] = (int) $data['num2'];
//        $time=htmlspecialchars($data['end_time']);
//        $end=str_replace("-","",$time);
//        $yan=strtotime($end);
//        if($yan<time()){
//            $this->tuError('请选择正确时间');
//        }
//        $data['end_time'] = $yan;
//        if (empty($data['end_time'])) {
//            $this->tuError('活动结束时间不能为空');
//        }
//        //查询当前可下架时间
//        $config=D('Setting')->fetchAll();
//        $xait=$config['goods']['xia_time'];
//        $hourtime = date("Y-m-d", strtotime("+".$xait."hour"));
//        $datetime=strtotime($hourtime);
//        $data['xaitime']=$datetime;
//        $data['create_time'] = NOW_TIME;
//        $data['audit'] = 0;
//        //判断是否可以在首页展示
//        $shop=D('Shop')->where(['shop_id'=>$this->shop_id])->find();
//        if($shop['is_manage']==1){
//            $data['type']=1;
//        }else{
//            $data['type']=0;
//        }
//
//        $data['create_ip'] = get_client_ip();
//
//        return $data;
//    }

    //新添加
    public function create(){
        if ($this->isPost()){
            $data = $this->createCheck();
            $obj = D('Goods');
            $data['huodong']=1;
            if($goods_id = $obj->add($data)) {
                $config=D('Setting')->fetchAll();
                $xait=$config['goods']['xia_time'];
                $hourtime = date("Y-m-d H:i:s", strtotime("+".$xait."hour"));
                $datetime=strtotime($hourtime);
                $data['xaitime']=$datetime;
                $data['goods_id']=$goods_id;
                $data['audit']=0;
                $guodong=D('MallactivityGoods')->add($data);
                $photos = $this->_post('photos', false);
                if (!empty($photos)) {
                    D('Goodsphoto')->upload($goods_id, $photos);
                }
                $this->shuxin($goods_id);
                $this->saveGoodsAttr($goods_id,$_POST['goods_type']); //更新商品属性 -->
                $this->tuSuccess('添加成功', U('mallactivity/index'));
            }
            $this->tuError('操作失败');
        }else{
            $this->assign('goodsType',M("TpGoodsType")->where(array("shop_id"=>$this->shop_id))->select());
            $this->display();
        }
    }


    private function createCheck() {
        $data = $this->checkFields($this->_post('data', false), $this->create_fields);
        $data['title'] = htmlspecialchars($data['title']);
        if (empty($data['title'])) {
            $this->tuError('产品名称不能为空');
        }

        $data['intro'] = htmlspecialchars($data['intro']);
        if (empty($data['intro'])) {
            $this->tuError('副标题不能为空');
        }

        $data['guige'] = htmlspecialchars($data['guige']);
        if (empty($data['guige'])) {
            $this->tuError('副标题不能为空');
        }
        $data['抢购数量'] = (int) $data['num'];
        if (empty($data['num'])) {
            $this->tuError('库存不能为空');
        }
        $data['mai_num']=(int) $data['num'];
        $data['is_reight'] = (int) $data['is_reight'];

        $data['weight'] = (int) $data['weight'];
        if ($data['is_reight'] == 1) {
            if (empty($data['weight'])) {
                $this->tuError('重量不能为空');
            }
        }
        $data['kuaidi_id'] = (int) $data['kuaidi_id'];
        if ($data['is_reight'] == 1) {
            if (empty($data['kuaidi_id'])) {
                $this->tuError('运费模板不能为空');
            }
        }
        $data['shop_id'] = $this->shop_id;

        $data['shopcate_id'] = (int) $data['shopcate_id'];


        $data['area_id'] = $this->shop['area_id'];
        $data['business_id'] = $this->shop['business_id'];
        $data['city_id'] = $this->shop['city_id'];

        $data['goods_type'] = I('goods_type');

        $data['photo'] = htmlspecialchars($data['photo']);
        if (empty($data['photo'])) {
            $this->tuError('请上传缩略图');
        }
        if (!isImage($data['photo'])) {
            $this->tuError('缩略图格式不正确');
        }

        $data['type_id'] = (int)$data['type_id'];
        if (empty($data['type_id'])) {
            $this->tuError('活动类型不能为空');
        }

        $data['time_id']= (int) $data['time_id'];
        
        if($data['type_id']==1 && $data['time_id']==0){
            $this->tuError('请选择开售时间');
        }
        if($data['type_id']==2 && $data['time_id']==0){
            $this->tuError('请选择开售时间');
        }
        $times=D('MallactivitySpecial')->where(['time_id'=>$data['time_id']])->find();
        $data['time_num']=$times['time_name'];

        $data['price'] = (float) ($data['price']);
        if (empty($data['price'])) {
            $this->tuError('市场价格不能为空');
        }
        $data['mall_price'] = (float) ($data['mall_price']);
        if (empty($data['mall_price'])) {
            $this->tuError('活动价格不能为空');
        }

        if ($data['type_id']==2){
            if (!ereg("^[0-9]{1,3}[.][8]$", $data['mall_price'])) {
                $this->tuError('小数点后一位必须为8');
            }
        }


        $data['details'] = SecurityEditorHtml($data['details']);
        if (empty($data['details'])) {
            $this->tuError('商品详情不能为空');
        }
        if ($words = D('Sensitive')->checkWords($data['details'])) {
            $this->tuError('商品详情含有敏感词：' . $words);
        }
        $data['end_date'] = htmlspecialchars($data['end_date']);
        if (empty($data['end_date'])) {
            $this->tuError('过期时间不能为空');
        }
        if (!isDate($data['end_date'])) {
            $this->tuError('过期时间格式不正确');
        }
        $data['is_vs1'] = (int) $data['is_vs1'];
        $data['is_vs2'] = (int) $data['is_vs2'];
        $data['is_vs3'] = (int) $data['is_vs3'];
        $data['is_vs4'] = (int) $data['is_vs4'];
        $data['is_vs5'] = (int) $data['is_vs5'];
        $data['is_vs6'] = (int) $data['is_vs6'];
        $data['is_vs7'] = (int) $data['is_vs7'];
        $data['is_vs8'] = (int) $data['is_vs8'];
        $data['is_vs9'] = (int) $data['is_vs9'];

        $data['create_time'] = NOW_TIME;
        $data['create_ip'] = get_client_ip();
        $data['sold_num'] = 0;
        $data['is_mall'] = 1;
        $data['audit']=1;
        return $data;
    }

    //查看详情
    public function edit($goods_id = 0){
        if ($goods_id = (int) $goods_id) {
            $obj = D('MallactivityGoods');
            if (!$detail = $obj->find($goods_id)) {
                $this->error('请选择要查看的商品');
            }
            if ($detail['shop_id'] != $this->shop_id) {
                $this->error('请不要试图越权操作其他人的内容');
            }

            $this->assign('goodsType', M("TpGoodsType")->select());
            $shop_user = D('Shop')->find($detail['shop_id']);
            $this->assign('detail', $obj->_format($detail));
            $this->assign('parent_id', D('Goodscate')->getParentsId($detail['cate_id']));
            //$this->assign('cates', D('Goodscate')->fetchAll());
            $this->assign('shop', $shop_user);

            $this->assign('photos', D('Goodsphoto')->getPics($goods_id));
            $this->display();
        }
    }





    //下架
    public function xai($goods_id=0){
        $goods_id = (int) $goods_id;
        if(!empty($goods_id)) {
            $obj = D('MallactivityGoods');
            if(!$detail = $obj->find($goods_id)){
                $this->tuError('下架的活动不存在');
            }
            if($detail['xaitime']>time()){
                $this->tuError('当前未满足下架时间');
            }
            if($obj->where(['goods_id'=>$goods_id])->save(['closed'=>1])){
                D('Goods')->where(['goods_id'=>$goods_id])->save(['closed'=>1]);
                $this->tuSuccess('该产品以下架', U('mallactivity/index'));
            }

        }else{
            $this->tuError('请选择要下架的活动商品');
        }
    }

    //上架
    public function shang($goods_id=0){
        $goods_id = (int) $goods_id;
        if(!empty($goods_id)) {
            $obj = D('MallactivityGoods');
            if(!$detail = $obj->find($goods_id)){
                $this->tuError('活动产品不存在');
            }
            if($obj->where(['goods_id'=>$goods_id])->save(['closed'=>0])){
                D('Goods')->where(['goods_id'=>$goods_id])->save(['closed'=>0]);
                $this->tuSuccess('该产品以上架', U('mallactivity/index'));
            }

        }else{
            $this->tuError('请选择要上架的活动商品');
        }
    }




    //删除
    public function delete($goods_id = 0){
        $goods_id = (int) $goods_id;
        if(!empty($goods_id)){
            $obj = D('MallactivityGoods');
            if(!$detail = $obj->find($goods_id)){
                $this->tuError('删除的活动不存在');
            }
            if($detail['xaitime']>time()){
                $this->tuError('当前未满足下架时间');
            }
            if($detail['shop_id'] != $this->shop_id){
                $this->tuError('请不要非法操作');
            }
            if($obj->where(['goods_id'=>$goods_id])->delete()){
                D('Goods')->where(['goods_id'=>$detail['goods_id'],'shop_id'=>$this->shop_id])->delete();
                $this->tuSuccess('删除成功', U('mallactivity/index'));
            }

        }else{
            $this->tuError('请选择要删除的活动');
        }
    }

    //发放免费够物卷
    public function shopping(){
        $obj=D('ShoppingEleStoreMarket');
        import('ORG.Util.Page');
        $map = array('closed' => 0,'shop_id'=>$this->shop_id,'type'=>4);
        $count = $obj->where($map)->count();
        $Page = new Page($count, 15);
        $show = $Page->show();
        $list = $obj->where($map)->order(array('id' => 'desc'))->limit($Page->firstRow . ',' . $Page->listRows)->select();
        $this->assign('list', $list);
        $this->assign('page', $show);
        $this->display();
    }

    //发放购物券
    public function shopcreate(){
        $config = D('Setting')->fetchAll();
        if($this->ispost()){
            $obj=D('ShoppingEleStoreMarket');
            $datail=$obj->where(['shop_id'=>$this->shop_id,'audit'=>1,'close'=>0,'type'=>4])->select();
            if(!empty($datail)){
                $this->tuError('您发布的抢购卷未过期，不能重复发布');
            }
            $num=I('post.num');
            $end=$config['goods']['shopping_time'];
            $times=date("Y-m-d",strtotime('+'.$end.'day'));
            $data=array();
            $data['num']=$num;
            $data['shop_id']=$this->shop_id;
            $data['create_time']=NOW_TIME;
            $data['end_time']=$times;
            $data['create_ip']=get_client_ip();
            $data['type']=4;
            if($obj->add($data)){
                $this->tuSuccess('发布成功', U('mallactivity/shopping'));
            }
            $this->tuError('发布失败');
        }else{
            $this->assign('config',$config);
        }
        $this->display();
    }

    //领取日志
    public function shoppinglist(){
        $obj=D('CollarEleStoreMarket');
        import('ORG.Util.Page');
        $map = array('closed' => 0,'shop_id'=>$this->shop_id);
        $count = $obj->where($map)->count();
        $Page = new Page($count, 15);
        $show = $Page->show();
        $list = $obj->where($map)->order(array('id' => 'desc'))->limit($Page->firstRow . ',' . $Page->listRows)->select();
        $user_ids=array();
        foreach ($list as $val){
            $user_ids[]=$val['user_id'];
        }
        $this->assign('user',D('Users')->itemsByIds($user_ids));
        $this->assign('list', $list);
        $this->assign('page', $show);
        $this->display();
    }

    //删除
    public function del($id){
        $id = (int) $id;
        if(!empty($id)){
            $obj = D('CollarEleStoreMarket');
            if(!$detail = $obj->find($id)){
                $this->tuError('删除的日志不存在');
            }
            if($detail['shop_id'] != $this->shop_id){
                $this->tuError('请不要非法操作');
            }
            $obj->where(['id'=>$id])->save(['closed'=>1,'huodong'=>0]);
            $this->tuSuccess('删除成功', U('mallactivity/shoppinglist'));
        }else{
            $this->tuError('请选择要删除的日志');
        }
    }

    public function shuxin($goods_id){
        if($_POST['item']){
            $spec = M('TpSpec')->getField('id,name');
            $specItem = M('TpSpecItem')->getField('id,item');

            $specGoodsPrice = M("TpSpecGoodsPrice");
            $specGoodsPrice->where('goods_id = '.$goods_id)->delete();
            foreach($_POST['item'] as $k => $v){
                $v['price'] = trim($v['price']);
                $store_count = $v['store_count'] = trim($v['store_count']);
                $v['bar_code'] = trim($v['bar_code']);
                $dataList[] = array('goods_id'=>$goods_id,'key'=>$k,'key_name'=>$v['key_name'],'price'=>$v['price'],'store_count'=>$v['store_count'],'bar_code'=>$v['bar_code']);
            }
            $specGoodsPrice->addAll($dataList);
        }
        refresh_stock($goods_id);

    }

    /**
     *  给指定商品添加属性 或修改属性 更新到 tp_goods_attr
     * @param int $goods_id  商品id
     * @param int $goods_type  商品类型id
     */
    public function saveGoodsAttr($goods_id,$goods_type){


        // 属性类型被更改了 就先删除以前的属性类型 或者没有属性 则删除
        if($goods_type == 0)  {
            M('tpGoodsAttr')->where(array('goods_id'=>$goods_id))->delete();
            return;
        }

        $GoodsAttrList = M('tpGoodsAttr')->where(array('goods_id'=>$goods_id))->select();

        $old_goods_attr = array(); //数据库中的的属性以attr_id_和值的组合为键名
        foreach($GoodsAttrList as $k => $v){
            $old_goods_attr[$v['attr_id'].'_'.$v['attr_value']] = $v;
        }

        // post提交的属性以attr_id_和值的组合为键名
        $post_goods_attr = array();

        foreach($_POST as $k => $v){
            $attr_id = str_replace('attr_','',$k);
            if(!strstr($k, 'attr_') || strstr($k, 'attr_price_'))
                continue;
            foreach ($v as $k2 => $v2){
                $v2 = str_replace('_', '', $v2); //替换特殊字符
                $v2 = str_replace('@', '', $v2); //替换特殊字符
                $v2 = trim($v2);

                if(empty($v2))
                    continue;
                $tmp_key = $attr_id."_".$v2;
                $attr_price = $_POST["attr_price_$attr_id"][$k2];
                $attr_price = $attr_price ? $attr_price : 0;
                if(array_key_exists($tmp_key , $old_goods_attr)){
                    //如果这个属性原来就存在
                    if($old_goods_attr[$tmp_key]['attr_price'] != $attr_price){
                        //并且价格不一样就做更新处理
                        $goods_attr_id = $old_goods_attr[$tmp_key]['goods_attr_id'];
                        M('tpGoodsAttr')->where(array('goods_attr_id'=>$goods_attr_id))->save(array('attr_price'=>$attr_price));
                    }
                }else{
                    //否则这个属性 数据库中不存在 说明要做删除操作
                    M('tpGoodsAttr')->add(array('goods_id'=>$goods_id,'attr_id'=>$attr_id,'attr_value'=>$v2,'attr_price'=>$attr_price));
                }
                unset($old_goods_attr[$tmp_key]);
            }
        }
        //没有被unset($old_goods_attr[$tmp_key]); 掉是说明数据库中存在表单中没有提交过来则要删除操作
        foreach($old_goods_attr as $k => $v){
            M('tpGoodsAttr')->where(array('goods_attr_id'=>$v['goods_attr_id']))->delete();
        }
    }

    //动态获取商品属性入框根据不同的数据返回不同的输入框类型
    public function ajaxGetAttrInput(){
        $goods_id = $_REQUEST['goods_id'] ? $_REQUEST['goods_id'] : 0;
        $type_id = $_REQUEST['type_id'] ? $_REQUEST['type_id'] : 0;
        $str = $this->getAttrInput($goods_id,$type_id);
        exit($str);
    }

    /**
     * 动态获取商品属性输入框 根据不同的数据返回不同的输入框类型
     * @param int $goods_id 商品id
     * @param int $type_id 商品属性类型id
     */
    public function getAttrInput($goods_id,$type_id){



        $attributeList = M('tpGoodsAttribute')->where(array('type_id'=>$type_id))->select();
        foreach($attributeList as $key => $val){

            $curAttrVal = $this->getGoodsAttrVal(NULL,$goods_id, $val['attr_id']);
            //促使他循环
            if(count($curAttrVal) == 0 || false == $curAttrVal)
                $curAttrVal[] = array('goods_attr_id' =>'','goods_id' => '','attr_id' => '','attr_value' => '','attr_price' => '');
            foreach($curAttrVal as $k =>$v){
                $str .= "<tr class='attr_{$val['attr_id']}'>";
                $addDelAttr = ''; //加减符号
                //单选属性或者复选属性
                if($val['attr_type'] == 1 || $val['attr_type'] == 2){
                    if($k == 0)
                        $addDelAttr .= "<a onclick='addAttr(this)' href='javascript:void(0);'>[+]</a>&nbsp&nbsp";
                    else
                        $addDelAttr .= "<a onclick='delAttr(this)' href='javascript:void(0);'>[-]</a>&nbsp&nbsp";
                }

                $str .= "<td>$addDelAttr {$val['attr_name']}</td> <td>";

                //手工录入
                if($val['attr_input_type'] == 0){
                    $str .= "<input type='text' size='40' value='{$v['attr_value']}' name='attr_{$val['attr_id']}[]' />";
                }
                //从下面的列表中选择（一行代表一个可选值）
                if($val['attr_input_type'] == 1){
                    $str .= "<select name='attr_{$val['attr_id']}[]'>";
                    $tmp_option_val = explode(PHP_EOL, $val['attr_values']);
                    foreach($tmp_option_val as $k2=>$v2){
                        //编辑的时候有选中值
                        $v2 = preg_replace("/\s/","",$v2);
                        if($v['attr_value'] == $v2)
                            $str .= "<option selected='selected' value='{$v2}'>{$v2}</option>";
                        else
                            $str .= "<option value='{$v2}'>{$v2}</option>";
                    }
                    $str .= "</select>";
                }
                //多行文本框
                if($val['attr_input_type'] == 2){
                    $str .= "<textarea cols='40' rows='3' name='attr_{$val['attr_id']}[]'>{$v['attr_value']}</textarea>";
                }
                $str .= "</td></tr>";
            }

        }
        return  $str;
    }

    /**
     * 获取 tp_goods_attr 表中指定 goods_id  指定 attr_id  或者 指定 goods_attr_id 的值 可是字符串 可是数组
     * @param int $goods_attr_id tp_goods_attr表id
     * @param int $goods_id 商品id
     * @param int $attr_id 商品属性id
     * @return array 返回数组
     */
    public function getGoodsAttrVal($goods_attr_id = 0 ,$goods_id = 0, $attr_id = 0)
    {
        if($goods_attr_id > 0)
            return M('tpGoodsAttr')->where(array('goods_attr_id'=>$goods_attr_id))->select();
        if($goods_id > 0 && $attr_id > 0)
            return M('tpGoodsAttr')->where(array('goods_id'=>$goods_id,'attr_id'=>$attr_id))->select();
    }

    /**
     * 动态获取商品规格输入框 根据不同的数据返回不同的输入框
     */
    public function ajaxGetSpecInput(){

        $goods_id = $_REQUEST['goods_id'] ? $_REQUEST['goods_id'] : 0;
        //var_dump($goods_id);die;
        $str = $this->getSpecInput($goods_id ,$_POST['spec_arr']);
        exit($str);
    }

    /**
     * 获取 规格的 笛卡尔积
     * @param $goods_id 商品 id
     * @param $spec_arr 笛卡尔积
     * @return string 返回表格字符串
     */
    public function getSpecInput($goods_id, $spec_arr){
        foreach ($spec_arr as $k => $v){
            $spec_arr_sort[$k] = count($v);
        }
        asort($spec_arr_sort);
        foreach ($spec_arr_sort as $key =>$val){
            $spec_arr2[$key] = $spec_arr[$key];
        }
        $clo_name = array_keys($spec_arr2);
        $spec_arr2 = combineDika($spec_arr2);

        $spec = M('TpSpec')->getField('id,name');
        $specItem = M('TpSpecItem')->getField('id,item,spec_id');
        $keySpecGoodsPrice = M('TpSpecGoodsPrice')->where('goods_id = '.$goods_id)->getField('key,key_name,price,store_count,bar_code');

        $str = "<table class='table table-bordered' id='spec_input_tab'>";
        $str .="<tr>";
        foreach ($clo_name as $k => $v) {
            $str .=" <td><b>{$spec[$v]}</b></td>";
        }
        $str .="<td><b>活动价格</b></td>
               <td><b>库存</b></td>
               <td><b>条码</b></td>
             </tr>";
        foreach ($spec_arr2 as $k => $v) {
            $str .="<tr>";
            $item_key_name = array();
            foreach($v as $k2 => $v2)
            {
                $str .="<td>{$specItem[$v2][item]}</td>";
                $item_key_name[$v2] = $spec[$specItem[$v2]['spec_id']].':'.$specItem[$v2]['item'];
            }
            ksort($item_key_name);
            $item_key = implode('_', array_keys($item_key_name));
            $item_name = implode(' ', $item_key_name);

            $keySpecGoodsPrice[$item_key][price] ? false : $keySpecGoodsPrice[$item_key][price] = 0; // 价格默认为0
            $keySpecGoodsPrice[$item_key][pin_price] ? false : $keySpecGoodsPrice[$item_key][pin_price] = 0; // 拼单价格默认为0
            $keySpecGoodsPrice[$item_key][store_count] ? false : $keySpecGoodsPrice[$item_key][store_count] = 0; //库存默认为0
            $str .="<td><input name='item[$item_key][price]' value='{$keySpecGoodsPrice[$item_key][price]}' onkeyup='this.value=this.value.replace(/[^\d.]/g,\"\")' onpaste='this.value=this.value.replace(/[^\d.]/g,\"\")' /></td>";
            $str .="<td><input name='item[$item_key][store_count]' value='{$keySpecGoodsPrice[$item_key][store_count]}' onkeyup='this.value=this.value.replace(/[^\d.]/g,\"\")' onpaste='this.value=this.value.replace(/[^\d.]/g,\"\")'/></td>";
            $str .="<td><input name='item[$item_key][bar_code]' value='{$keySpecGoodsPrice[$item_key][bar_code]}' />
                <input type='hidden' name='item[$item_key][key_name]' value='$item_name' /></td>";
            $str .="</tr>";
        }
        $str .= "</table>";
        return $str;
    }

    /**
     * 动态获取商品规格选择框 根据不同的数据返回不同的选择框
     */
    public function ajaxGetSpecSelect(){
        $goods_id = $_GET['goods_id'] ? $_GET['goods_id'] : 0;
        $specList = D('TpSpec')->where("type_id = ".$_GET['spec_type'])->order('`order` desc')->select();
        foreach($specList as $k => $v)
            $specList[$k]['spec_item'] = D('TpSpecItem')->where("spec_id = ".$v['id'])->getField('id,item'); // 获取规格项
        $items_id = M('TpSpecGoodsPrice')->where('goods_id = '.$goods_id)->getField("GROUP_CONCAT(`key` SEPARATOR '_') AS items_id");
        $items_ids = explode('_', $items_id);
        if($goods_id){
            $specImageList = M('TpSpecImage')->where("goods_id = $goods_id")->getField('spec_image_id,src');
        }
        $this->assign('specImageList',$specImageList);

        $this->assign('items_ids',$items_ids);
        $this->assign('specList',$specList);
        $this->display('ajax_spec_select');
    }


}